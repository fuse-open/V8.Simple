/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_v8(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_v8(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_v8(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include "V8Simple.h"


#include <string>


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::string const &std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< V8Simple::Value * > *new_std_vector_Sl_V8Simple_Value_Sm__Sg___SWIG_2(int capacity){
        std::vector< V8Simple::Value * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< V8Simple::Value * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN V8Simple::Value *std_vector_Sl_V8Simple_Value_Sm__Sg__getitemcopy(std::vector< V8Simple::Value * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN V8Simple::Value *const &std_vector_Sl_V8Simple_Value_Sm__Sg__getitem(std::vector< V8Simple::Value * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_V8Simple_Value_Sm__Sg__setitem(std::vector< V8Simple::Value * > *self,int index,V8Simple::Value *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_V8Simple_Value_Sm__Sg__AddRange(std::vector< V8Simple::Value * > *self,std::vector< V8Simple::Value * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< V8Simple::Value * > *std_vector_Sl_V8Simple_Value_Sm__Sg__GetRange(std::vector< V8Simple::Value * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< V8Simple::Value * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_V8Simple_Value_Sm__Sg__Insert(std::vector< V8Simple::Value * > *self,int index,V8Simple::Value *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_V8Simple_Value_Sm__Sg__InsertRange(std::vector< V8Simple::Value * > *self,int index,std::vector< V8Simple::Value * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_V8Simple_Value_Sm__Sg__RemoveAt(std::vector< V8Simple::Value * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_V8Simple_Value_Sm__Sg__RemoveRange(std::vector< V8Simple::Value * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< V8Simple::Value * > *std_vector_Sl_V8Simple_Value_Sm__Sg__Repeat(V8Simple::Value *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< V8Simple::Value * >(count, value);
      }
SWIGINTERN void std_vector_Sl_V8Simple_Value_Sm__Sg__Reverse__SWIG_0(std::vector< V8Simple::Value * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_V8Simple_Value_Sm__Sg__Reverse__SWIG_1(std::vector< V8Simple::Value * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_V8Simple_Value_Sm__Sg__SetRange(std::vector< V8Simple::Value * > *self,int index,std::vector< V8Simple::Value * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_V8Simple_Value_Sm__Sg__Contains(std::vector< V8Simple::Value * > *self,V8Simple::Value *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_V8Simple_Value_Sm__Sg__IndexOf(std::vector< V8Simple::Value * > *self,V8Simple::Value *const &value){
        int index = -1;
        std::vector< V8Simple::Value * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_V8Simple_Value_Sm__Sg__LastIndexOf(std::vector< V8Simple::Value * > *self,V8Simple::Value *const &value){
        int index = -1;
        std::vector< V8Simple::Value * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_V8Simple_Value_Sm__Sg__Remove(std::vector< V8Simple::Value * > *self,V8Simple::Value *const &value){
        std::vector< V8Simple::Value * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_ScriptException_Name_set(void * jarg1, char * jarg2) {
  V8Simple::ScriptException *arg1 = (V8Simple::ScriptException *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (V8Simple::ScriptException *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Name = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ScriptException_Name_get(void * jarg1) {
  char * jresult ;
  V8Simple::ScriptException *arg1 = (V8Simple::ScriptException *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (V8Simple::ScriptException *)jarg1; 
  result = (std::string *) & ((arg1)->Name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptException_ErrorMessage_set(void * jarg1, char * jarg2) {
  V8Simple::ScriptException *arg1 = (V8Simple::ScriptException *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (V8Simple::ScriptException *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->ErrorMessage = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ScriptException_ErrorMessage_get(void * jarg1) {
  char * jresult ;
  V8Simple::ScriptException *arg1 = (V8Simple::ScriptException *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (V8Simple::ScriptException *)jarg1; 
  result = (std::string *) & ((arg1)->ErrorMessage);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptException_FileName_set(void * jarg1, char * jarg2) {
  V8Simple::ScriptException *arg1 = (V8Simple::ScriptException *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (V8Simple::ScriptException *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->FileName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ScriptException_FileName_get(void * jarg1) {
  char * jresult ;
  V8Simple::ScriptException *arg1 = (V8Simple::ScriptException *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (V8Simple::ScriptException *)jarg1; 
  result = (std::string *) & ((arg1)->FileName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptException_StackTrace_set(void * jarg1, char * jarg2) {
  V8Simple::ScriptException *arg1 = (V8Simple::ScriptException *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (V8Simple::ScriptException *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->StackTrace = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ScriptException_StackTrace_get(void * jarg1) {
  char * jresult ;
  V8Simple::ScriptException *arg1 = (V8Simple::ScriptException *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (V8Simple::ScriptException *)jarg1; 
  result = (std::string *) & ((arg1)->StackTrace);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptException_SourceLine_set(void * jarg1, char * jarg2) {
  V8Simple::ScriptException *arg1 = (V8Simple::ScriptException *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (V8Simple::ScriptException *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->SourceLine = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ScriptException_SourceLine_get(void * jarg1) {
  char * jresult ;
  V8Simple::ScriptException *arg1 = (V8Simple::ScriptException *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (V8Simple::ScriptException *)jarg1; 
  result = (std::string *) & ((arg1)->SourceLine);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptException_LineNumber_set(void * jarg1, int jarg2) {
  V8Simple::ScriptException *arg1 = (V8Simple::ScriptException *) 0 ;
  int arg2 ;
  
  arg1 = (V8Simple::ScriptException *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LineNumber = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ScriptException_LineNumber_get(void * jarg1) {
  int jresult ;
  V8Simple::ScriptException *arg1 = (V8Simple::ScriptException *) 0 ;
  int result;
  
  arg1 = (V8Simple::ScriptException *)jarg1; 
  result = (int) ((arg1)->LineNumber);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ScriptException(char * jarg1, char * jarg2, char * jarg3, int jarg4, char * jarg5, char * jarg6) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  V8Simple::ScriptException *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  result = (V8Simple::ScriptException *)new V8Simple::ScriptException((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ScriptException(void * jarg1) {
  V8Simple::ScriptException *arg1 = (V8Simple::ScriptException *) 0 ;
  
  arg1 = (V8Simple::ScriptException *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Exception_Message_set(void * jarg1, char * jarg2) {
  V8Simple::Exception *arg1 = (V8Simple::Exception *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (V8Simple::Exception *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Message = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Exception_Message_get(void * jarg1) {
  char * jresult ;
  V8Simple::Exception *arg1 = (V8Simple::Exception *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (V8Simple::Exception *)jarg1; 
  result = (std::string *) & ((arg1)->Message);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Exception(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  V8Simple::Exception *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (V8Simple::Exception *)new V8Simple::Exception(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Exception(void * jarg1) {
  V8Simple::Exception *arg1 = (V8Simple::Exception *) 0 ;
  
  arg1 = (V8Simple::Exception *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Context() {
  void * jresult ;
  V8Simple::Context *result = 0 ;
  
  try {
    result = (V8Simple::Context *)new V8Simple::Context();
  }
  catch(V8Simple::Exception &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::Exception exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Context_Evaluate(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  V8Simple::Context *arg1 = (V8Simple::Context *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  V8Simple::Value *result = 0 ;
  
  arg1 = (V8Simple::Context *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    result = (V8Simple::Value *)(arg1)->Evaluate((std::string const &)*arg2,(std::string const &)*arg3);
  }
  catch(V8Simple::ScriptException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::ScriptException exception thrown");
    return 0; 
  }
  catch(V8Simple::Exception &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::Exception exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Context_GlobalObject(void * jarg1) {
  void * jresult ;
  V8Simple::Context *arg1 = (V8Simple::Context *) 0 ;
  V8Simple::Object *result = 0 ;
  
  arg1 = (V8Simple::Context *)jarg1; 
  result = (V8Simple::Object *)(arg1)->GlobalObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Context(void * jarg1) {
  V8Simple::Context *arg1 = (V8Simple::Context *) 0 ;
  
  arg1 = (V8Simple::Context *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Value_GetValueType(void * jarg1) {
  int jresult ;
  V8Simple::Value *arg1 = (V8Simple::Value *) 0 ;
  V8Simple::Type result;
  
  arg1 = (V8Simple::Value *)jarg1; 
  result = (V8Simple::Type)((V8Simple::Value const *)arg1)->GetValueType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Value(void * jarg1) {
  V8Simple::Value *arg1 = (V8Simple::Value *) 0 ;
  
  arg1 = (V8Simple::Value *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_AsInt(void * jarg1) {
  void * jresult ;
  V8Simple::Value *arg1 = (V8Simple::Value *) 0 ;
  V8Simple::Primitive< int > *result = 0 ;
  
  arg1 = (V8Simple::Value *)jarg1; 
  result = (V8Simple::Primitive< int > *)(arg1)->SWIGTEMPLATEDISAMBIGUATOR As< V8Simple::Int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_AsDouble(void * jarg1) {
  void * jresult ;
  V8Simple::Value *arg1 = (V8Simple::Value *) 0 ;
  V8Simple::Primitive< double > *result = 0 ;
  
  arg1 = (V8Simple::Value *)jarg1; 
  result = (V8Simple::Primitive< double > *)(arg1)->SWIGTEMPLATEDISAMBIGUATOR As< V8Simple::Double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_AsString(void * jarg1) {
  void * jresult ;
  V8Simple::Value *arg1 = (V8Simple::Value *) 0 ;
  V8Simple::Primitive< std::string > *result = 0 ;
  
  arg1 = (V8Simple::Value *)jarg1; 
  result = (V8Simple::Primitive< std::string > *)(arg1)->SWIGTEMPLATEDISAMBIGUATOR As< V8Simple::String >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_AsBool(void * jarg1) {
  void * jresult ;
  V8Simple::Value *arg1 = (V8Simple::Value *) 0 ;
  V8Simple::Primitive< bool > *result = 0 ;
  
  arg1 = (V8Simple::Value *)jarg1; 
  result = (V8Simple::Primitive< bool > *)(arg1)->SWIGTEMPLATEDISAMBIGUATOR As< V8Simple::Bool >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_AsObject(void * jarg1) {
  void * jresult ;
  V8Simple::Value *arg1 = (V8Simple::Value *) 0 ;
  V8Simple::Object *result = 0 ;
  
  arg1 = (V8Simple::Value *)jarg1; 
  result = (V8Simple::Object *)(arg1)->SWIGTEMPLATEDISAMBIGUATOR As< V8Simple::Object >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_AsFunction(void * jarg1) {
  void * jresult ;
  V8Simple::Value *arg1 = (V8Simple::Value *) 0 ;
  V8Simple::Function *result = 0 ;
  
  arg1 = (V8Simple::Value *)jarg1; 
  result = (V8Simple::Function *)(arg1)->SWIGTEMPLATEDISAMBIGUATOR As< V8Simple::Function >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_AsArray(void * jarg1) {
  void * jresult ;
  V8Simple::Value *arg1 = (V8Simple::Value *) 0 ;
  V8Simple::Array *result = 0 ;
  
  arg1 = (V8Simple::Value *)jarg1; 
  result = (V8Simple::Array *)(arg1)->SWIGTEMPLATEDISAMBIGUATOR As< V8Simple::Array >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Value_AsCallback(void * jarg1) {
  void * jresult ;
  V8Simple::Value *arg1 = (V8Simple::Value *) 0 ;
  V8Simple::Callback *result = 0 ;
  
  arg1 = (V8Simple::Value *)jarg1; 
  result = (V8Simple::Callback *)(arg1)->SWIGTEMPLATEDISAMBIGUATOR As< V8Simple::Callback >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Object_GetValueType(void * jarg1) {
  int jresult ;
  V8Simple::Object *arg1 = (V8Simple::Object *) 0 ;
  V8Simple::Type result;
  
  arg1 = (V8Simple::Object *)jarg1; 
  result = (V8Simple::Type)((V8Simple::Object const *)arg1)->GetValueType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_Get(void * jarg1, char * jarg2) {
  void * jresult ;
  V8Simple::Object *arg1 = (V8Simple::Object *) 0 ;
  std::string *arg2 = 0 ;
  V8Simple::Value *result = 0 ;
  
  arg1 = (V8Simple::Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (V8Simple::Value *)(arg1)->Get((std::string const &)*arg2);
  }
  catch(V8Simple::ScriptException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::ScriptException exception thrown");
    return 0; 
  }
  catch(V8Simple::Exception &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::Exception exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_Set(void * jarg1, char * jarg2, void * jarg3) {
  V8Simple::Object *arg1 = (V8Simple::Object *) 0 ;
  std::string *arg2 = 0 ;
  V8Simple::Value *arg3 = 0 ;
  
  arg1 = (V8Simple::Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (V8Simple::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "V8Simple::Value const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->Set((std::string const &)*arg2,(V8Simple::Value const &)*arg3);
  }
  catch(V8Simple::ScriptException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::ScriptException exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_Keys(void * jarg1) {
  void * jresult ;
  V8Simple::Object *arg1 = (V8Simple::Object *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (V8Simple::Object *)jarg1; 
  try {
    result = (arg1)->Keys();
  }
  catch(V8Simple::ScriptException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::ScriptException exception thrown");
    return 0; 
  }
  
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_InstanceOf(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  V8Simple::Object *arg1 = (V8Simple::Object *) 0 ;
  V8Simple::Function *arg2 = 0 ;
  bool result;
  
  arg1 = (V8Simple::Object *)jarg1; 
  arg2 = (V8Simple::Function *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "V8Simple::Function & type is null", 0);
    return 0;
  } 
  try {
    result = (bool)(arg1)->InstanceOf(*arg2);
  }
  catch(V8Simple::ScriptException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::ScriptException exception thrown");
    return 0; 
  }
  catch(V8Simple::Exception &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::Exception exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_CallMethod(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  V8Simple::Object *arg1 = (V8Simple::Object *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< V8Simple::Value * > *arg3 = 0 ;
  V8Simple::Value *result = 0 ;
  
  arg1 = (V8Simple::Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< V8Simple::Value * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< V8Simple::Value * > const & type is null", 0);
    return 0;
  } 
  try {
    result = (V8Simple::Value *)(arg1)->CallMethod((std::string const &)*arg2,(std::vector< V8Simple::Value * > const &)*arg3);
  }
  catch(V8Simple::ScriptException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::ScriptException exception thrown");
    return 0; 
  }
  catch(V8Simple::Exception &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::Exception exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_ContainsKey(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  V8Simple::Object *arg1 = (V8Simple::Object *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (V8Simple::Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (bool)(arg1)->ContainsKey((std::string const &)*arg2);
  }
  catch(V8Simple::ScriptException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::ScriptException exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  V8Simple::Object *arg1 = (V8Simple::Object *) 0 ;
  V8Simple::Object *arg2 = 0 ;
  bool result;
  
  arg1 = (V8Simple::Object *)jarg1; 
  arg2 = (V8Simple::Object *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "V8Simple::Object const & type is null", 0);
    return 0;
  } 
  try {
    result = (bool)(arg1)->Equals((V8Simple::Object const &)*arg2);
  }
  catch(V8Simple::ScriptException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::ScriptException exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Object(void * jarg1) {
  V8Simple::Object *arg1 = (V8Simple::Object *) 0 ;
  
  arg1 = (V8Simple::Object *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Function_GetValueType(void * jarg1) {
  int jresult ;
  V8Simple::Function *arg1 = (V8Simple::Function *) 0 ;
  V8Simple::Type result;
  
  arg1 = (V8Simple::Function *)jarg1; 
  result = (V8Simple::Type)((V8Simple::Function const *)arg1)->GetValueType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Function_Call(void * jarg1, void * jarg2) {
  void * jresult ;
  V8Simple::Function *arg1 = (V8Simple::Function *) 0 ;
  std::vector< V8Simple::Value * > *arg2 = 0 ;
  V8Simple::Value *result = 0 ;
  
  arg1 = (V8Simple::Function *)jarg1; 
  arg2 = (std::vector< V8Simple::Value * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< V8Simple::Value * > const & type is null", 0);
    return 0;
  } 
  try {
    result = (V8Simple::Value *)(arg1)->Call((std::vector< V8Simple::Value * > const &)*arg2);
  }
  catch(V8Simple::ScriptException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::ScriptException exception thrown");
    return 0; 
  }
  catch(V8Simple::Exception &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::Exception exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Function_Construct(void * jarg1, void * jarg2) {
  void * jresult ;
  V8Simple::Function *arg1 = (V8Simple::Function *) 0 ;
  std::vector< V8Simple::Value * > *arg2 = 0 ;
  V8Simple::Object *result = 0 ;
  
  arg1 = (V8Simple::Function *)jarg1; 
  arg2 = (std::vector< V8Simple::Value * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< V8Simple::Value * > const & type is null", 0);
    return 0;
  } 
  try {
    result = (V8Simple::Object *)(arg1)->Construct((std::vector< V8Simple::Value * > const &)*arg2);
  }
  catch(V8Simple::ScriptException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::ScriptException exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Function_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  V8Simple::Function *arg1 = (V8Simple::Function *) 0 ;
  V8Simple::Function *arg2 = 0 ;
  bool result;
  
  arg1 = (V8Simple::Function *)jarg1; 
  arg2 = (V8Simple::Function *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "V8Simple::Function const & type is null", 0);
    return 0;
  } 
  try {
    result = (bool)(arg1)->Equals((V8Simple::Function const &)*arg2);
  }
  catch(V8Simple::ScriptException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::ScriptException exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Function(void * jarg1) {
  V8Simple::Function *arg1 = (V8Simple::Function *) 0 ;
  
  arg1 = (V8Simple::Function *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Array_GetValueType(void * jarg1) {
  int jresult ;
  V8Simple::Array *arg1 = (V8Simple::Array *) 0 ;
  V8Simple::Type result;
  
  arg1 = (V8Simple::Array *)jarg1; 
  result = (V8Simple::Type)((V8Simple::Array const *)arg1)->GetValueType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Array_Get(void * jarg1, int jarg2) {
  void * jresult ;
  V8Simple::Array *arg1 = (V8Simple::Array *) 0 ;
  int arg2 ;
  V8Simple::Value *result = 0 ;
  
  arg1 = (V8Simple::Array *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (V8Simple::Value *)(arg1)->Get(arg2);
  }
  catch(V8Simple::ScriptException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::ScriptException exception thrown");
    return 0; 
  }
  catch(V8Simple::Exception &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::Exception exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Array_Set(void * jarg1, int jarg2, void * jarg3) {
  V8Simple::Array *arg1 = (V8Simple::Array *) 0 ;
  int arg2 ;
  V8Simple::Value *arg3 = 0 ;
  
  arg1 = (V8Simple::Array *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (V8Simple::Value *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "V8Simple::Value const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->Set(arg2,(V8Simple::Value const &)*arg3);
  }
  catch(V8Simple::ScriptException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::ScriptException exception thrown");
    return ; 
  }
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_Array_Length(void * jarg1) {
  int jresult ;
  V8Simple::Array *arg1 = (V8Simple::Array *) 0 ;
  int result;
  
  arg1 = (V8Simple::Array *)jarg1; 
  result = (int)(arg1)->Length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Array_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  V8Simple::Array *arg1 = (V8Simple::Array *) 0 ;
  V8Simple::Array *arg2 = 0 ;
  bool result;
  
  arg1 = (V8Simple::Array *)jarg1; 
  arg2 = (V8Simple::Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "V8Simple::Array const & type is null", 0);
    return 0;
  } 
  try {
    result = (bool)(arg1)->Equals((V8Simple::Array const &)*arg2);
  }
  catch(V8Simple::ScriptException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::ScriptException exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Array(void * jarg1) {
  V8Simple::Array *arg1 = (V8Simple::Array *) 0 ;
  
  arg1 = (V8Simple::Array *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Callback_GetValueType(void * jarg1) {
  int jresult ;
  V8Simple::Callback *arg1 = (V8Simple::Callback *) 0 ;
  V8Simple::Type result;
  
  arg1 = (V8Simple::Callback *)jarg1; 
  result = (V8Simple::Type)((V8Simple::Callback const *)arg1)->GetValueType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Callback_Call(void * jarg1, void * jarg2) {
  void * jresult ;
  V8Simple::Callback *arg1 = (V8Simple::Callback *) 0 ;
  std::vector< V8Simple::Value * > *arg2 = 0 ;
  V8Simple::Value *result = 0 ;
  
  arg1 = (V8Simple::Callback *)jarg1; 
  arg2 = (std::vector< V8Simple::Value * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< V8Simple::Value * > const & type is null", 0);
    return 0;
  } 
  try {
    result = (V8Simple::Value *)(arg1)->Call((std::vector< V8Simple::Value * > const &)*arg2);
  }
  catch(V8Simple::ScriptException &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::ScriptException exception thrown");
    return 0; 
  }
  catch(V8Simple::Exception &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ V8Simple::Exception exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Callback_Copy(void * jarg1) {
  void * jresult ;
  V8Simple::Callback *arg1 = (V8Simple::Callback *) 0 ;
  V8Simple::Callback *result = 0 ;
  
  arg1 = (V8Simple::Callback *)jarg1; 
  result = (V8Simple::Callback *)((V8Simple::Callback const *)arg1)->Copy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Callback(void * jarg1) {
  V8Simple::Callback *arg1 = (V8Simple::Callback *) 0 ;
  
  arg1 = (V8Simple::Callback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Int(int jarg1) {
  void * jresult ;
  int *arg1 = 0 ;
  int temp1 ;
  V8Simple::Primitive< int > *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  result = (V8Simple::Primitive< int > *)new V8Simple::Primitive< int >((int const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Int_GetValueType(void * jarg1) {
  int jresult ;
  V8Simple::Primitive< int > *arg1 = (V8Simple::Primitive< int > *) 0 ;
  V8Simple::Type result;
  
  arg1 = (V8Simple::Primitive< int > *)jarg1; 
  result = (V8Simple::Type)((V8Simple::Primitive< int > const *)arg1)->GetValueType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Int_GetValue(void * jarg1) {
  int jresult ;
  V8Simple::Primitive< int > *arg1 = (V8Simple::Primitive< int > *) 0 ;
  int result;
  
  arg1 = (V8Simple::Primitive< int > *)jarg1; 
  result = (int)((V8Simple::Primitive< int > const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Int(void * jarg1) {
  V8Simple::Primitive< int > *arg1 = (V8Simple::Primitive< int > *) 0 ;
  
  arg1 = (V8Simple::Primitive< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Double(double jarg1) {
  void * jresult ;
  double *arg1 = 0 ;
  double temp1 ;
  V8Simple::Primitive< double > *result = 0 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  result = (V8Simple::Primitive< double > *)new V8Simple::Primitive< double >((double const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Double_GetValueType(void * jarg1) {
  int jresult ;
  V8Simple::Primitive< double > *arg1 = (V8Simple::Primitive< double > *) 0 ;
  V8Simple::Type result;
  
  arg1 = (V8Simple::Primitive< double > *)jarg1; 
  result = (V8Simple::Type)((V8Simple::Primitive< double > const *)arg1)->GetValueType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Double_GetValue(void * jarg1) {
  double jresult ;
  V8Simple::Primitive< double > *arg1 = (V8Simple::Primitive< double > *) 0 ;
  double result;
  
  arg1 = (V8Simple::Primitive< double > *)jarg1; 
  result = (double)((V8Simple::Primitive< double > const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Double(void * jarg1) {
  V8Simple::Primitive< double > *arg1 = (V8Simple::Primitive< double > *) 0 ;
  
  arg1 = (V8Simple::Primitive< double > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_String(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  V8Simple::Primitive< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (V8Simple::Primitive< std::string > *)new V8Simple::Primitive< std::string >((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_String_GetValueType(void * jarg1) {
  int jresult ;
  V8Simple::Primitive< std::string > *arg1 = (V8Simple::Primitive< std::string > *) 0 ;
  V8Simple::Type result;
  
  arg1 = (V8Simple::Primitive< std::string > *)jarg1; 
  result = (V8Simple::Type)((V8Simple::Primitive< std::string > const *)arg1)->GetValueType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_String_GetValue(void * jarg1) {
  char * jresult ;
  V8Simple::Primitive< std::string > *arg1 = (V8Simple::Primitive< std::string > *) 0 ;
  std::string result;
  
  arg1 = (V8Simple::Primitive< std::string > *)jarg1; 
  result = ((V8Simple::Primitive< std::string > const *)arg1)->GetValue();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_String(void * jarg1) {
  V8Simple::Primitive< std::string > *arg1 = (V8Simple::Primitive< std::string > *) 0 ;
  
  arg1 = (V8Simple::Primitive< std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Bool(unsigned int jarg1) {
  void * jresult ;
  bool *arg1 = 0 ;
  bool temp1 ;
  V8Simple::Primitive< bool > *result = 0 ;
  
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  result = (V8Simple::Primitive< bool > *)new V8Simple::Primitive< bool >((bool const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bool_GetValueType(void * jarg1) {
  int jresult ;
  V8Simple::Primitive< bool > *arg1 = (V8Simple::Primitive< bool > *) 0 ;
  V8Simple::Type result;
  
  arg1 = (V8Simple::Primitive< bool > *)jarg1; 
  result = (V8Simple::Type)((V8Simple::Primitive< bool > const *)arg1)->GetValueType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Bool_GetValue(void * jarg1) {
  unsigned int jresult ;
  V8Simple::Primitive< bool > *arg1 = (V8Simple::Primitive< bool > *) 0 ;
  bool result;
  
  arg1 = (V8Simple::Primitive< bool > *)jarg1; 
  result = (bool)((V8Simple::Primitive< bool > const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Bool(void * jarg1) {
  V8Simple::Primitive< bool > *arg1 = (V8Simple::Primitive< bool > *) 0 ;
  
  arg1 = (V8Simple::Primitive< bool > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Clear(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Add(void * jarg1, char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->push_back((std::string const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_0() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StringVector_getitemcopy(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StringVector_getitem(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::string *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_setitem(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Insert(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringVector_Repeat(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_Contains(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringVector_IndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringVector_LastIndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringVector(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ValueVector_Clear(void * jarg1) {
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ValueVector_Add(void * jarg1, void * jarg2) {
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  V8Simple::Value **arg2 = 0 ;
  V8Simple::Value *temp2 = 0 ;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  temp2 = (V8Simple::Value *)jarg2;
  arg2 = (V8Simple::Value **)&temp2; 
  (arg1)->push_back((V8Simple::Value *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ValueVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  std::vector< V8Simple::Value * >::size_type result;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  result = ((std::vector< V8Simple::Value * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ValueVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  std::vector< V8Simple::Value * >::size_type result;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  result = ((std::vector< V8Simple::Value * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ValueVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  std::vector< V8Simple::Value * >::size_type arg2 ;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  arg2 = (std::vector< V8Simple::Value * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ValueVector__SWIG_0() {
  void * jresult ;
  std::vector< V8Simple::Value * > *result = 0 ;
  
  result = (std::vector< V8Simple::Value * > *)new std::vector< V8Simple::Value * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ValueVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< V8Simple::Value * > *arg1 = 0 ;
  std::vector< V8Simple::Value * > *result = 0 ;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< V8Simple::Value * > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< V8Simple::Value * > *)new std::vector< V8Simple::Value * >((std::vector< V8Simple::Value * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ValueVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< V8Simple::Value * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< V8Simple::Value * > *)new_std_vector_Sl_V8Simple_Value_Sm__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ValueVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  int arg2 ;
  V8Simple::Value *result = 0 ;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (V8Simple::Value *)std_vector_Sl_V8Simple_Value_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ValueVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  int arg2 ;
  V8Simple::Value **result = 0 ;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (V8Simple::Value **) &std_vector_Sl_V8Simple_Value_Sm__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ValueVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  int arg2 ;
  V8Simple::Value **arg3 = 0 ;
  V8Simple::Value *temp3 = 0 ;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (V8Simple::Value *)jarg3;
  arg3 = (V8Simple::Value **)&temp3; 
  try {
    std_vector_Sl_V8Simple_Value_Sm__Sg__setitem(arg1,arg2,(V8Simple::Value *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ValueVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  std::vector< V8Simple::Value * > *arg2 = 0 ;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  arg2 = (std::vector< V8Simple::Value * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< V8Simple::Value * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_V8Simple_Value_Sm__Sg__AddRange(arg1,(std::vector< V8Simple::Value * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ValueVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< V8Simple::Value * > *result = 0 ;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< V8Simple::Value * > *)std_vector_Sl_V8Simple_Value_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ValueVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  int arg2 ;
  V8Simple::Value **arg3 = 0 ;
  V8Simple::Value *temp3 = 0 ;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (V8Simple::Value *)jarg3;
  arg3 = (V8Simple::Value **)&temp3; 
  try {
    std_vector_Sl_V8Simple_Value_Sm__Sg__Insert(arg1,arg2,(V8Simple::Value *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ValueVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  int arg2 ;
  std::vector< V8Simple::Value * > *arg3 = 0 ;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< V8Simple::Value * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< V8Simple::Value * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_V8Simple_Value_Sm__Sg__InsertRange(arg1,arg2,(std::vector< V8Simple::Value * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ValueVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_V8Simple_Value_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ValueVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_V8Simple_Value_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ValueVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  V8Simple::Value **arg1 = 0 ;
  int arg2 ;
  V8Simple::Value *temp1 = 0 ;
  std::vector< V8Simple::Value * > *result = 0 ;
  
  temp1 = (V8Simple::Value *)jarg1;
  arg1 = (V8Simple::Value **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< V8Simple::Value * > *)std_vector_Sl_V8Simple_Value_Sm__Sg__Repeat((V8Simple::Value *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ValueVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  std_vector_Sl_V8Simple_Value_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ValueVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_V8Simple_Value_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ValueVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  int arg2 ;
  std::vector< V8Simple::Value * > *arg3 = 0 ;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< V8Simple::Value * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< V8Simple::Value * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_V8Simple_Value_Sm__Sg__SetRange(arg1,arg2,(std::vector< V8Simple::Value * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ValueVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  V8Simple::Value **arg2 = 0 ;
  V8Simple::Value *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  temp2 = (V8Simple::Value *)jarg2;
  arg2 = (V8Simple::Value **)&temp2; 
  result = (bool)std_vector_Sl_V8Simple_Value_Sm__Sg__Contains(arg1,(V8Simple::Value *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ValueVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  V8Simple::Value **arg2 = 0 ;
  V8Simple::Value *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  temp2 = (V8Simple::Value *)jarg2;
  arg2 = (V8Simple::Value **)&temp2; 
  result = (int)std_vector_Sl_V8Simple_Value_Sm__Sg__IndexOf(arg1,(V8Simple::Value *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ValueVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  V8Simple::Value **arg2 = 0 ;
  V8Simple::Value *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  temp2 = (V8Simple::Value *)jarg2;
  arg2 = (V8Simple::Value **)&temp2; 
  result = (int)std_vector_Sl_V8Simple_Value_Sm__Sg__LastIndexOf(arg1,(V8Simple::Value *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ValueVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  V8Simple::Value **arg2 = 0 ;
  V8Simple::Value *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  temp2 = (V8Simple::Value *)jarg2;
  arg2 = (V8Simple::Value **)&temp2; 
  result = (bool)std_vector_Sl_V8Simple_Value_Sm__Sg__Remove(arg1,(V8Simple::Value *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ValueVector(void * jarg1) {
  std::vector< V8Simple::Value * > *arg1 = (std::vector< V8Simple::Value * > *) 0 ;
  
  arg1 = (std::vector< V8Simple::Value * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT V8Simple::Value * SWIGSTDCALL CSharp_Object_SWIGUpcast(V8Simple::Object *jarg1) {
    return (V8Simple::Value *)jarg1;
}

SWIGEXPORT V8Simple::Value * SWIGSTDCALL CSharp_Function_SWIGUpcast(V8Simple::Function *jarg1) {
    return (V8Simple::Value *)jarg1;
}

SWIGEXPORT V8Simple::Value * SWIGSTDCALL CSharp_Array_SWIGUpcast(V8Simple::Array *jarg1) {
    return (V8Simple::Value *)jarg1;
}

SWIGEXPORT V8Simple::Value * SWIGSTDCALL CSharp_Callback_SWIGUpcast(V8Simple::Callback *jarg1) {
    return (V8Simple::Value *)jarg1;
}

SWIGEXPORT V8Simple::Value * SWIGSTDCALL CSharp_Int_SWIGUpcast(V8Simple::Primitive< int > *jarg1) {
    return (V8Simple::Value *)jarg1;
}

SWIGEXPORT V8Simple::Value * SWIGSTDCALL CSharp_Double_SWIGUpcast(V8Simple::Primitive< double > *jarg1) {
    return (V8Simple::Value *)jarg1;
}

SWIGEXPORT V8Simple::Value * SWIGSTDCALL CSharp_String_SWIGUpcast(V8Simple::Primitive< std::string > *jarg1) {
    return (V8Simple::Value *)jarg1;
}

SWIGEXPORT V8Simple::Value * SWIGSTDCALL CSharp_Bool_SWIGUpcast(V8Simple::Primitive< bool > *jarg1) {
    return (V8Simple::Value *)jarg1;
}

#ifdef __cplusplus
}
#endif

