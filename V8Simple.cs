//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Fuse.Scripting.V8.Simple {

public enum Type {
  Int,
  Double,
  String,
  Bool,
  Object,
  Array,
  Function,
  Callback
}

}
namespace Fuse.Scripting.V8.Simple {

public class Value : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Value(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Value obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Value() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          v8PINVOKE.delete_Value(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual Type GetValueType() {
    Type ret = (Type)v8PINVOKE.Value_GetValueType(swigCPtr);
    return ret;
  }

}

}
namespace Fuse.Scripting.V8.Simple {

public class String : Value {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal String(global::System.IntPtr cPtr, bool cMemoryOwn) : base(v8PINVOKE.String_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(String obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~String() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          v8PINVOKE.delete_String(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public String(string value) : this(v8PINVOKE.new_String__SWIG_0(value), true) {
  }

  public String(string value, int length) : this(v8PINVOKE.new_String__SWIG_1(value, length), true) {
  }

  public String(String str) : this(v8PINVOKE.new_String__SWIG_2(String.getCPtr(str)), true) {
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public override Type GetValueType() {
    Type ret = (Type)v8PINVOKE.String_GetValueType(swigCPtr);
    return ret;
  }

  public string GetValue() {
    string ret = v8PINVOKE.String_GetValue(swigCPtr);
    return ret;
  }

}

}
namespace Fuse.Scripting.V8.Simple {

public class Function : Value {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Function(global::System.IntPtr cPtr, bool cMemoryOwn) : base(v8PINVOKE.Function_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Function obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Function() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          v8PINVOKE.delete_Function(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public override Type GetValueType() {
    Type ret = (Type)v8PINVOKE.Function_GetValueType(swigCPtr);
    return ret;
  }

  public Value Call(ValueVector args) {
	global::System.IntPtr cPtr = v8PINVOKE.Function_Call(swigCPtr, ValueVector.getCPtr(args));
	Value ret = (Value) v8PINVOKE.InstantiateConcreteValue(cPtr, true);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
	return ret;
}

  public Object Construct(ValueVector args) {
    global::System.IntPtr cPtr = v8PINVOKE.Function_Construct(swigCPtr, ValueVector.getCPtr(args));
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, true);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Equals(Function f) {
    bool ret = v8PINVOKE.Function_Equals(swigCPtr, Function.getCPtr(f));
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace Fuse.Scripting.V8.Simple {

public class Object : Value {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Object(global::System.IntPtr cPtr, bool cMemoryOwn) : base(v8PINVOKE.Object_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Object obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Object() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          v8PINVOKE.delete_Object(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public override Type GetValueType() {
    Type ret = (Type)v8PINVOKE.Object_GetValueType(swigCPtr);
    return ret;
  }

  public Value Get(string key) {
	global::System.IntPtr cPtr = v8PINVOKE.Object_Get(swigCPtr, key);
	Value ret = (Value) v8PINVOKE.InstantiateConcreteValue(cPtr, true);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
	return ret;
}

  public void Set(string key, Value value) {
    v8PINVOKE.Object_Set(swigCPtr, key, Value.getCPtr(value));
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_V8Simple__String_t Keys() {
    SWIGTYPE_p_std__vectorT_V8Simple__String_t ret = new SWIGTYPE_p_std__vectorT_V8Simple__String_t(v8PINVOKE.Object_Keys(swigCPtr), true);
    return ret;
  }

  public bool InstanceOf(Function type) {
    bool ret = v8PINVOKE.Object_InstanceOf(swigCPtr, Function.getCPtr(type));
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Value CallMethod(string name, ValueVector args) {
	global::System.IntPtr cPtr = v8PINVOKE.Object_CallMethod(swigCPtr, name, ValueVector.getCPtr(args));
	Value ret = (Value) v8PINVOKE.InstantiateConcreteValue(cPtr, true);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
	return ret;
}

  public bool ContainsKey(string key) {
    bool ret = v8PINVOKE.Object_ContainsKey(swigCPtr, key);
    return ret;
  }

  public bool Equals(Object arg0) {
    bool ret = v8PINVOKE.Object_Equals(swigCPtr, Object.getCPtr(arg0));
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace Fuse.Scripting.V8.Simple {

public class Array : Value {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Array(global::System.IntPtr cPtr, bool cMemoryOwn) : base(v8PINVOKE.Array_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Array obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Array() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          v8PINVOKE.delete_Array(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public override Type GetValueType() {
    Type ret = (Type)v8PINVOKE.Array_GetValueType(swigCPtr);
    return ret;
  }

  public Value Get(int index) {
	global::System.IntPtr cPtr = v8PINVOKE.Array_Get(swigCPtr, index);
	Value ret = (Value) v8PINVOKE.InstantiateConcreteValue(cPtr, true);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
	return ret;
}

  public void Set(int index, Value value) {
    v8PINVOKE.Array_Set(swigCPtr, index, Value.getCPtr(value));
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public int Length() {
    int ret = v8PINVOKE.Array_Length(swigCPtr);
    return ret;
  }

  public bool Equals(Array array) {
    bool ret = v8PINVOKE.Array_Equals(swigCPtr, Array.getCPtr(array));
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace Fuse.Scripting.V8.Simple {

public class Callback : Value {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Callback(global::System.IntPtr cPtr, bool cMemoryOwn) : base(v8PINVOKE.Callback_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Callback obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Callback() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          v8PINVOKE.delete_Callback(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Callback() : this(v8PINVOKE.new_Callback(), true) {
    SwigDirectorConnect();
  }

  public override Type GetValueType() {
    Type ret = (Type)(SwigDerivedClassHasMethod("GetValueType", swigMethodTypes0) ? v8PINVOKE.Callback_GetValueTypeSwigExplicitCallback(swigCPtr) : v8PINVOKE.Callback_GetValueType(swigCPtr));
    return ret;
  }

  public virtual Value Call(ValueVector args) {
	global::System.IntPtr cPtr = (SwigDerivedClassHasMethod("Call", swigMethodTypes1) ? v8PINVOKE.Callback_CallSwigExplicitCallback(swigCPtr, ValueVector.getCPtr(args)) : v8PINVOKE.Callback_Call(swigCPtr, ValueVector.getCPtr(args)));
	Value ret = (Value) v8PINVOKE.InstantiateConcreteValue(cPtr, true);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
	return ret;
}

  public virtual void Retain() {
    if (SwigDerivedClassHasMethod("Retain", swigMethodTypes2)) v8PINVOKE.Callback_RetainSwigExplicitCallback(swigCPtr); else v8PINVOKE.Callback_Retain(swigCPtr);
  }

  public virtual void Release() {
    if (SwigDerivedClassHasMethod("Release", swigMethodTypes3)) v8PINVOKE.Callback_ReleaseSwigExplicitCallback(swigCPtr); else v8PINVOKE.Callback_Release(swigCPtr);
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("GetValueType", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateCallback_0(SwigDirectorGetValueType);
    if (SwigDerivedClassHasMethod("Call", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateCallback_1(SwigDirectorCall);
    if (SwigDerivedClassHasMethod("Retain", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateCallback_2(SwigDirectorRetain);
    if (SwigDerivedClassHasMethod("Release", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateCallback_3(SwigDirectorRelease);
    v8PINVOKE.Callback_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(Callback));
    return hasDerivedMethod;
  }

  private int SwigDirectorGetValueType() {
    return (int)GetValueType();
  }

  private global::System.IntPtr SwigDirectorCall(global::System.IntPtr args) {
    return Value.getCPtr(Call(new ValueVector(args, false))).Handle;
  }

  private void SwigDirectorRetain() {
    Retain();
  }

  private void SwigDirectorRelease() {
    Release();
  }

  public delegate int SwigDelegateCallback_0();
  public delegate global::System.IntPtr SwigDelegateCallback_1(global::System.IntPtr args);
  public delegate void SwigDelegateCallback_2();
  public delegate void SwigDelegateCallback_3();

  private SwigDelegateCallback_0 swigDelegate0;
  private SwigDelegateCallback_1 swigDelegate1;
  private SwigDelegateCallback_2 swigDelegate2;
  private SwigDelegateCallback_3 swigDelegate3;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(ValueVector) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] {  };
}

}
namespace Fuse.Scripting.V8.Simple {

public class ScriptException : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ScriptException(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ScriptException obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ScriptException() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          v8PINVOKE.delete_ScriptException(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public String GetName() {
    String ret = new String(v8PINVOKE.ScriptException_GetName(swigCPtr), false);
    return ret;
  }

  public String GetErrorMessage() {
    String ret = new String(v8PINVOKE.ScriptException_GetErrorMessage(swigCPtr), false);
    return ret;
  }

  public String GetFileName() {
    String ret = new String(v8PINVOKE.ScriptException_GetFileName(swigCPtr), false);
    return ret;
  }

  public int GetLineNumber() {
    int ret = v8PINVOKE.ScriptException_GetLineNumber(swigCPtr);
    return ret;
  }

  public String GetStackTrace() {
    String ret = new String(v8PINVOKE.ScriptException_GetStackTrace(swigCPtr), false);
    return ret;
  }

  public String GetSourceLine() {
    String ret = new String(v8PINVOKE.ScriptException_GetSourceLine(swigCPtr), false);
    return ret;
  }

}

}
namespace Fuse.Scripting.V8.Simple {

public class DebugMessageHandler : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DebugMessageHandler(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DebugMessageHandler obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DebugMessageHandler() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          v8PINVOKE.delete_DebugMessageHandler(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void Handle(string jsonMessage) {
    v8PINVOKE.DebugMessageHandler_Handle(swigCPtr, jsonMessage);
  }

  public virtual void Retain() {
    v8PINVOKE.DebugMessageHandler_Retain(swigCPtr);
  }

  public virtual void Release() {
    v8PINVOKE.DebugMessageHandler_Release(swigCPtr);
  }

}

}
namespace Fuse.Scripting.V8.Simple {

public class ScriptExceptionHandler : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ScriptExceptionHandler(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ScriptExceptionHandler obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ScriptExceptionHandler() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          v8PINVOKE.delete_ScriptExceptionHandler(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void Handle(ScriptException e) {
    v8PINVOKE.ScriptExceptionHandler_Handle(swigCPtr, ScriptException.getCPtr(e));
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Retain() {
    if (SwigDerivedClassHasMethod("Retain", swigMethodTypes1)) v8PINVOKE.ScriptExceptionHandler_RetainSwigExplicitScriptExceptionHandler(swigCPtr); else v8PINVOKE.ScriptExceptionHandler_Retain(swigCPtr);
  }

  public virtual void Release() {
    if (SwigDerivedClassHasMethod("Release", swigMethodTypes2)) v8PINVOKE.ScriptExceptionHandler_ReleaseSwigExplicitScriptExceptionHandler(swigCPtr); else v8PINVOKE.ScriptExceptionHandler_Release(swigCPtr);
  }

  public ScriptExceptionHandler() : this(v8PINVOKE.new_ScriptExceptionHandler(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("Handle", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateScriptExceptionHandler_0(SwigDirectorHandle);
    if (SwigDerivedClassHasMethod("Retain", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateScriptExceptionHandler_1(SwigDirectorRetain);
    if (SwigDerivedClassHasMethod("Release", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateScriptExceptionHandler_2(SwigDirectorRelease);
    v8PINVOKE.ScriptExceptionHandler_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(ScriptExceptionHandler));
    return hasDerivedMethod;
  }

  private void SwigDirectorHandle(global::System.IntPtr e) {
    Handle(new ScriptException(e, false));
  }

  private void SwigDirectorRetain() {
    Retain();
  }

  private void SwigDirectorRelease() {
    Release();
  }

  public delegate void SwigDelegateScriptExceptionHandler_0(global::System.IntPtr e);
  public delegate void SwigDelegateScriptExceptionHandler_1();
  public delegate void SwigDelegateScriptExceptionHandler_2();

  private SwigDelegateScriptExceptionHandler_0 swigDelegate0;
  private SwigDelegateScriptExceptionHandler_1 swigDelegate1;
  private SwigDelegateScriptExceptionHandler_2 swigDelegate2;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(ScriptException) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] {  };
}

}
namespace Fuse.Scripting.V8.Simple {

public class Context : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Context(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Context obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Context() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          v8PINVOKE.delete_Context(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Context(ScriptExceptionHandler scriptExceptionHandler) : this(v8PINVOKE.new_Context(ScriptExceptionHandler.getCPtr(scriptExceptionHandler)), true) {
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public Value Evaluate(string fileName, string code) {
	global::System.IntPtr cPtr = v8PINVOKE.Context_Evaluate(swigCPtr, fileName, code);
	Value ret = (Value) v8PINVOKE.InstantiateConcreteValue(cPtr, true);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
	return ret;
}

  public Object GlobalObject() {
    global::System.IntPtr cPtr = v8PINVOKE.Context_GlobalObject(swigCPtr);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, true);
    return ret;
  }

  public bool IdleNotificationDeadline(double deadline_in_seconds) {
    bool ret = v8PINVOKE.Context_IdleNotificationDeadline(swigCPtr, deadline_in_seconds);
    return ret;
  }

  public static void SetDebugMessageHandler(DebugMessageHandler debugMessageHandler) {
    v8PINVOKE.Context_SetDebugMessageHandler(DebugMessageHandler.getCPtr(debugMessageHandler));
  }

  public static void SendDebugCommand(string command) {
    v8PINVOKE.Context_SendDebugCommand(command);
  }

  public static void ProcessDebugMessages() {
    v8PINVOKE.Context_ProcessDebugMessages();
  }

}

}
namespace Fuse.Scripting.V8.Simple {

public class Int : Value {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Int(global::System.IntPtr cPtr, bool cMemoryOwn) : base(v8PINVOKE.Int_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Int obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Int() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          v8PINVOKE.delete_Int(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Int(int value) : this(v8PINVOKE.new_Int(value), true) {
  }

  public override Type GetValueType() {
    Type ret = (Type)v8PINVOKE.Int_GetValueType(swigCPtr);
    return ret;
  }

  public int GetValue() {
    int ret = v8PINVOKE.Int_GetValue(swigCPtr);
    return ret;
  }

}

}
namespace Fuse.Scripting.V8.Simple {

public class Double : Value {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Double(global::System.IntPtr cPtr, bool cMemoryOwn) : base(v8PINVOKE.Double_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Double obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Double() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          v8PINVOKE.delete_Double(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Double(double value) : this(v8PINVOKE.new_Double(value), true) {
  }

  public override Type GetValueType() {
    Type ret = (Type)v8PINVOKE.Double_GetValueType(swigCPtr);
    return ret;
  }

  public double GetValue() {
    double ret = v8PINVOKE.Double_GetValue(swigCPtr);
    return ret;
  }

}

}
namespace Fuse.Scripting.V8.Simple {

public class Bool : Value {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Bool(global::System.IntPtr cPtr, bool cMemoryOwn) : base(v8PINVOKE.Bool_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Bool obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Bool() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          v8PINVOKE.delete_Bool(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Bool(bool value) : this(v8PINVOKE.new_Bool(value), true) {
  }

  public override Type GetValueType() {
    Type ret = (Type)v8PINVOKE.Bool_GetValueType(swigCPtr);
    return ret;
  }

  public bool GetValue() {
    bool ret = v8PINVOKE.Bool_GetValue(swigCPtr);
    return ret;
  }

}

}
namespace Fuse.Scripting.V8.Simple {

public class StringVector : global::System.IDisposable, global::System.Collections.IEnumerable
    , global::System.Collections.Generic.IList<string>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal StringVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StringVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~StringVector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          v8PINVOKE.delete_StringVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public StringVector(global::System.Collections.ICollection c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (string element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public string this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(string[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(string[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, string[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  global::System.Collections.Generic.IEnumerator<string> global::System.Collections.Generic.IEnumerable<string>.GetEnumerator() {
    return new StringVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new StringVectorEnumerator(this);
  }

  public StringVectorEnumerator GetEnumerator() {
    return new StringVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class StringVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<string>
  {
    private StringVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public StringVectorEnumerator(StringVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public string Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (string)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    v8PINVOKE.StringVector_Clear(swigCPtr);
  }

  public void Add(string x) {
    v8PINVOKE.StringVector_Add(swigCPtr, x);
  }

  private uint size() {
    uint ret = v8PINVOKE.StringVector_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = v8PINVOKE.StringVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    v8PINVOKE.StringVector_reserve(swigCPtr, n);
  }

  public StringVector() : this(v8PINVOKE.new_StringVector__SWIG_0(), true) {
  }

  public StringVector(StringVector other) : this(v8PINVOKE.new_StringVector__SWIG_1(StringVector.getCPtr(other)), true) {
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public StringVector(int capacity) : this(v8PINVOKE.new_StringVector__SWIG_2(capacity), true) {
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  private string getitemcopy(int index) {
    string ret = v8PINVOKE.StringVector_getitemcopy(swigCPtr, index);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private string getitem(int index) {
    string ret = v8PINVOKE.StringVector_getitem(swigCPtr, index);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, string val) {
    v8PINVOKE.StringVector_setitem(swigCPtr, index, val);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(StringVector values) {
    v8PINVOKE.StringVector_AddRange(swigCPtr, StringVector.getCPtr(values));
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public StringVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = v8PINVOKE.StringVector_GetRange(swigCPtr, index, count);
    StringVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new StringVector(cPtr, true);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, string x) {
    v8PINVOKE.StringVector_Insert(swigCPtr, index, x);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, StringVector values) {
    v8PINVOKE.StringVector_InsertRange(swigCPtr, index, StringVector.getCPtr(values));
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    v8PINVOKE.StringVector_RemoveAt(swigCPtr, index);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    v8PINVOKE.StringVector_RemoveRange(swigCPtr, index, count);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public static StringVector Repeat(string value, int count) {
    global::System.IntPtr cPtr = v8PINVOKE.StringVector_Repeat(value, count);
    StringVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new StringVector(cPtr, true);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    v8PINVOKE.StringVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    v8PINVOKE.StringVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, StringVector values) {
    v8PINVOKE.StringVector_SetRange(swigCPtr, index, StringVector.getCPtr(values));
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(string value) {
    bool ret = v8PINVOKE.StringVector_Contains(swigCPtr, value);
    return ret;
  }

  public int IndexOf(string value) {
    int ret = v8PINVOKE.StringVector_IndexOf(swigCPtr, value);
    return ret;
  }

  public int LastIndexOf(string value) {
    int ret = v8PINVOKE.StringVector_LastIndexOf(swigCPtr, value);
    return ret;
  }

  public bool Remove(string value) {
    bool ret = v8PINVOKE.StringVector_Remove(swigCPtr, value);
    return ret;
  }

}

}
namespace Fuse.Scripting.V8.Simple {

public class ValueVector : global::System.IDisposable, global::System.Collections.IEnumerable
    , global::System.Collections.Generic.IList<Value>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ValueVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ValueVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ValueVector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          v8PINVOKE.delete_ValueVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ValueVector(global::System.Collections.ICollection c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (Value element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public Value this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(Value[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(Value[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, Value[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  global::System.Collections.Generic.IEnumerator<Value> global::System.Collections.Generic.IEnumerable<Value>.GetEnumerator() {
    return new ValueVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new ValueVectorEnumerator(this);
  }

  public ValueVectorEnumerator GetEnumerator() {
    return new ValueVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class ValueVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<Value>
  {
    private ValueVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public ValueVectorEnumerator(ValueVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public Value Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (Value)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    v8PINVOKE.ValueVector_Clear(swigCPtr);
  }

  public void Add(Value x) {
    v8PINVOKE.ValueVector_Add(swigCPtr, Value.getCPtr(x));
  }

  private uint size() {
    uint ret = v8PINVOKE.ValueVector_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = v8PINVOKE.ValueVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    v8PINVOKE.ValueVector_reserve(swigCPtr, n);
  }

  public ValueVector() : this(v8PINVOKE.new_ValueVector__SWIG_0(), true) {
  }

  public ValueVector(ValueVector other) : this(v8PINVOKE.new_ValueVector__SWIG_1(ValueVector.getCPtr(other)), true) {
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public ValueVector(int capacity) : this(v8PINVOKE.new_ValueVector__SWIG_2(capacity), true) {
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  private Value getitemcopy(int index) {
	global::System.IntPtr cPtr = v8PINVOKE.ValueVector_getitemcopy(swigCPtr, index);
	Value ret = (Value) v8PINVOKE.InstantiateConcreteValue(cPtr, false);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
	return ret;
}

  private Value getitem(int index) {
    global::System.IntPtr cPtr = v8PINVOKE.ValueVector_getitem(swigCPtr, index);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, false);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, Value val) {
    v8PINVOKE.ValueVector_setitem(swigCPtr, index, Value.getCPtr(val));
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(ValueVector values) {
    v8PINVOKE.ValueVector_AddRange(swigCPtr, ValueVector.getCPtr(values));
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public ValueVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = v8PINVOKE.ValueVector_GetRange(swigCPtr, index, count);
    ValueVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ValueVector(cPtr, true);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, Value x) {
    v8PINVOKE.ValueVector_Insert(swigCPtr, index, Value.getCPtr(x));
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, ValueVector values) {
    v8PINVOKE.ValueVector_InsertRange(swigCPtr, index, ValueVector.getCPtr(values));
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    v8PINVOKE.ValueVector_RemoveAt(swigCPtr, index);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    v8PINVOKE.ValueVector_RemoveRange(swigCPtr, index, count);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public static ValueVector Repeat(Value value, int count) {
    global::System.IntPtr cPtr = v8PINVOKE.ValueVector_Repeat(Value.getCPtr(value), count);
    ValueVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ValueVector(cPtr, true);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    v8PINVOKE.ValueVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    v8PINVOKE.ValueVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, ValueVector values) {
    v8PINVOKE.ValueVector_SetRange(swigCPtr, index, ValueVector.getCPtr(values));
    if (v8PINVOKE.SWIGPendingException.Pending) throw v8PINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(Value value) {
    bool ret = v8PINVOKE.ValueVector_Contains(swigCPtr, Value.getCPtr(value));
    return ret;
  }

  public int IndexOf(Value value) {
    int ret = v8PINVOKE.ValueVector_IndexOf(swigCPtr, Value.getCPtr(value));
    return ret;
  }

  public int LastIndexOf(Value value) {
    int ret = v8PINVOKE.ValueVector_LastIndexOf(swigCPtr, Value.getCPtr(value));
    return ret;
  }

  public bool Remove(Value value) {
    bool ret = v8PINVOKE.ValueVector_Remove(swigCPtr, Value.getCPtr(value));
    return ret;
  }

}

}
namespace Fuse.Scripting.V8.Simple {

class v8PINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="SWIGRegisterExceptionCallbacks_v8")]
    public static extern void SWIGRegisterExceptionCallbacks_v8(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_v8")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_v8(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_v8(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_v8(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(v8PINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(v8PINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="SWIGRegisterStringCallback_v8")]
    public static extern void SWIGRegisterStringCallback_v8(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_v8(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static v8PINVOKE() {
  }


public static Value InstantiateConcreteValue(global::System.IntPtr cPtr, bool owner)
{
	if (cPtr == global::System.IntPtr.Zero)
	{
		return null;
	}
	Type type = (Type)v8PINVOKE.Value_GetValueType(new global::System.Runtime.InteropServices.HandleRef(null, cPtr));
	switch (type)
	{
		case Type.Int: return new Int(cPtr, owner);
		case Type.Double: return new Double(cPtr, owner);
		case Type.String: return new String(cPtr, owner);
		case Type.Bool: return new Bool(cPtr, owner);
		case Type.Object: return new Object(cPtr, owner);
		case Type.Function: return new Function(cPtr, owner);
		case Type.Array: return new Array(cPtr, owner);
	}
	throw new global::System.Exception("V8Simple: Unhandled value type");
}


  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_TypeNames_get")]
  public static extern global::System.IntPtr TypeNames_get();

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Value_GetValueType")]
  public static extern int Value_GetValueType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_delete_Value")]
  public static extern void delete_Value(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_new_String__SWIG_0")]
  public static extern global::System.IntPtr new_String__SWIG_0(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_new_String__SWIG_1")]
  public static extern global::System.IntPtr new_String__SWIG_1(string jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_new_String__SWIG_2")]
  public static extern global::System.IntPtr new_String__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_String_GetValueType")]
  public static extern int String_GetValueType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_String_GetValue")]
  public static extern string String_GetValue(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_delete_String")]
  public static extern void delete_String(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Function_GetValueType")]
  public static extern int Function_GetValueType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Function_Call")]
  public static extern global::System.IntPtr Function_Call(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Function_Construct")]
  public static extern global::System.IntPtr Function_Construct(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Function_Equals")]
  public static extern bool Function_Equals(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_delete_Function")]
  public static extern void delete_Function(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Object_GetValueType")]
  public static extern int Object_GetValueType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Object_Get")]
  public static extern global::System.IntPtr Object_Get(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Object_Set")]
  public static extern void Object_Set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Object_Keys")]
  public static extern global::System.IntPtr Object_Keys(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Object_InstanceOf")]
  public static extern bool Object_InstanceOf(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Object_CallMethod")]
  public static extern global::System.IntPtr Object_CallMethod(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Object_ContainsKey")]
  public static extern bool Object_ContainsKey(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Object_Equals")]
  public static extern bool Object_Equals(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_delete_Object")]
  public static extern void delete_Object(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Array_GetValueType")]
  public static extern int Array_GetValueType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Array_Get")]
  public static extern global::System.IntPtr Array_Get(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Array_Set")]
  public static extern void Array_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Array_Length")]
  public static extern int Array_Length(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Array_Equals")]
  public static extern bool Array_Equals(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_delete_Array")]
  public static extern void delete_Array(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_new_Callback")]
  public static extern global::System.IntPtr new_Callback();

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Callback_GetValueType")]
  public static extern int Callback_GetValueType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Callback_GetValueTypeSwigExplicitCallback")]
  public static extern int Callback_GetValueTypeSwigExplicitCallback(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Callback_Call")]
  public static extern global::System.IntPtr Callback_Call(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Callback_CallSwigExplicitCallback")]
  public static extern global::System.IntPtr Callback_CallSwigExplicitCallback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Callback_Retain")]
  public static extern void Callback_Retain(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Callback_RetainSwigExplicitCallback")]
  public static extern void Callback_RetainSwigExplicitCallback(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Callback_Release")]
  public static extern void Callback_Release(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Callback_ReleaseSwigExplicitCallback")]
  public static extern void Callback_ReleaseSwigExplicitCallback(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_delete_Callback")]
  public static extern void delete_Callback(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Callback_director_connect")]
  public static extern void Callback_director_connect(global::System.Runtime.InteropServices.HandleRef jarg1, Callback.SwigDelegateCallback_0 delegate0, Callback.SwigDelegateCallback_1 delegate1, Callback.SwigDelegateCallback_2 delegate2, Callback.SwigDelegateCallback_3 delegate3);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ScriptException_GetName")]
  public static extern global::System.IntPtr ScriptException_GetName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ScriptException_GetErrorMessage")]
  public static extern global::System.IntPtr ScriptException_GetErrorMessage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ScriptException_GetFileName")]
  public static extern global::System.IntPtr ScriptException_GetFileName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ScriptException_GetLineNumber")]
  public static extern int ScriptException_GetLineNumber(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ScriptException_GetStackTrace")]
  public static extern global::System.IntPtr ScriptException_GetStackTrace(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ScriptException_GetSourceLine")]
  public static extern global::System.IntPtr ScriptException_GetSourceLine(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_delete_ScriptException")]
  public static extern void delete_ScriptException(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_DebugMessageHandler_Handle")]
  public static extern void DebugMessageHandler_Handle(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_delete_DebugMessageHandler")]
  public static extern void delete_DebugMessageHandler(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_DebugMessageHandler_Retain")]
  public static extern void DebugMessageHandler_Retain(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_DebugMessageHandler_Release")]
  public static extern void DebugMessageHandler_Release(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ScriptExceptionHandler_Handle")]
  public static extern void ScriptExceptionHandler_Handle(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_delete_ScriptExceptionHandler")]
  public static extern void delete_ScriptExceptionHandler(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ScriptExceptionHandler_Retain")]
  public static extern void ScriptExceptionHandler_Retain(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ScriptExceptionHandler_RetainSwigExplicitScriptExceptionHandler")]
  public static extern void ScriptExceptionHandler_RetainSwigExplicitScriptExceptionHandler(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ScriptExceptionHandler_Release")]
  public static extern void ScriptExceptionHandler_Release(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ScriptExceptionHandler_ReleaseSwigExplicitScriptExceptionHandler")]
  public static extern void ScriptExceptionHandler_ReleaseSwigExplicitScriptExceptionHandler(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_new_ScriptExceptionHandler")]
  public static extern global::System.IntPtr new_ScriptExceptionHandler();

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ScriptExceptionHandler_director_connect")]
  public static extern void ScriptExceptionHandler_director_connect(global::System.Runtime.InteropServices.HandleRef jarg1, ScriptExceptionHandler.SwigDelegateScriptExceptionHandler_0 delegate0, ScriptExceptionHandler.SwigDelegateScriptExceptionHandler_1 delegate1, ScriptExceptionHandler.SwigDelegateScriptExceptionHandler_2 delegate2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_new_Context")]
  public static extern global::System.IntPtr new_Context(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Context_Evaluate")]
  public static extern global::System.IntPtr Context_Evaluate(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Context_GlobalObject")]
  public static extern global::System.IntPtr Context_GlobalObject(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Context_IdleNotificationDeadline")]
  public static extern bool Context_IdleNotificationDeadline(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_delete_Context")]
  public static extern void delete_Context(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Context_SetDebugMessageHandler")]
  public static extern void Context_SetDebugMessageHandler(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Context_SendDebugCommand")]
  public static extern void Context_SendDebugCommand(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Context_ProcessDebugMessages")]
  public static extern void Context_ProcessDebugMessages();

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_new_Int")]
  public static extern global::System.IntPtr new_Int(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Int_GetValueType")]
  public static extern int Int_GetValueType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Int_GetValue")]
  public static extern int Int_GetValue(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_delete_Int")]
  public static extern void delete_Int(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_new_Double")]
  public static extern global::System.IntPtr new_Double(double jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Double_GetValueType")]
  public static extern int Double_GetValueType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Double_GetValue")]
  public static extern double Double_GetValue(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_delete_Double")]
  public static extern void delete_Double(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_new_Bool")]
  public static extern global::System.IntPtr new_Bool(bool jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Bool_GetValueType")]
  public static extern int Bool_GetValueType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Bool_GetValue")]
  public static extern bool Bool_GetValue(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_delete_Bool")]
  public static extern void delete_Bool(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_Clear")]
  public static extern void StringVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_Add")]
  public static extern void StringVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_size")]
  public static extern uint StringVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_capacity")]
  public static extern uint StringVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_reserve")]
  public static extern void StringVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_new_StringVector__SWIG_0")]
  public static extern global::System.IntPtr new_StringVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_new_StringVector__SWIG_1")]
  public static extern global::System.IntPtr new_StringVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_new_StringVector__SWIG_2")]
  public static extern global::System.IntPtr new_StringVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_getitemcopy")]
  public static extern string StringVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_getitem")]
  public static extern string StringVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_setitem")]
  public static extern void StringVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_AddRange")]
  public static extern void StringVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_GetRange")]
  public static extern global::System.IntPtr StringVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_Insert")]
  public static extern void StringVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_InsertRange")]
  public static extern void StringVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_RemoveAt")]
  public static extern void StringVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_RemoveRange")]
  public static extern void StringVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_Repeat")]
  public static extern global::System.IntPtr StringVector_Repeat(string jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_Reverse__SWIG_0")]
  public static extern void StringVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_Reverse__SWIG_1")]
  public static extern void StringVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_SetRange")]
  public static extern void StringVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_Contains")]
  public static extern bool StringVector_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_IndexOf")]
  public static extern int StringVector_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_LastIndexOf")]
  public static extern int StringVector_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_StringVector_Remove")]
  public static extern bool StringVector_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_delete_StringVector")]
  public static extern void delete_StringVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_Clear")]
  public static extern void ValueVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_Add")]
  public static extern void ValueVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_size")]
  public static extern uint ValueVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_capacity")]
  public static extern uint ValueVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_reserve")]
  public static extern void ValueVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_new_ValueVector__SWIG_0")]
  public static extern global::System.IntPtr new_ValueVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_new_ValueVector__SWIG_1")]
  public static extern global::System.IntPtr new_ValueVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_new_ValueVector__SWIG_2")]
  public static extern global::System.IntPtr new_ValueVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_getitemcopy")]
  public static extern global::System.IntPtr ValueVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_getitem")]
  public static extern global::System.IntPtr ValueVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_setitem")]
  public static extern void ValueVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_AddRange")]
  public static extern void ValueVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_GetRange")]
  public static extern global::System.IntPtr ValueVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_Insert")]
  public static extern void ValueVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_InsertRange")]
  public static extern void ValueVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_RemoveAt")]
  public static extern void ValueVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_RemoveRange")]
  public static extern void ValueVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_Repeat")]
  public static extern global::System.IntPtr ValueVector_Repeat(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_Reverse__SWIG_0")]
  public static extern void ValueVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_Reverse__SWIG_1")]
  public static extern void ValueVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_SetRange")]
  public static extern void ValueVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_Contains")]
  public static extern bool ValueVector_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_IndexOf")]
  public static extern int ValueVector_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_LastIndexOf")]
  public static extern int ValueVector_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_ValueVector_Remove")]
  public static extern bool ValueVector_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_delete_ValueVector")]
  public static extern void delete_ValueVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_String_SWIGUpcast")]
  public static extern global::System.IntPtr String_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Function_SWIGUpcast")]
  public static extern global::System.IntPtr Function_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Object_SWIGUpcast")]
  public static extern global::System.IntPtr Object_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Array_SWIGUpcast")]
  public static extern global::System.IntPtr Array_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Callback_SWIGUpcast")]
  public static extern global::System.IntPtr Callback_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Int_SWIGUpcast")]
  public static extern global::System.IntPtr Int_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Double_SWIGUpcast")]
  public static extern global::System.IntPtr Double_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("V8Simple", EntryPoint="CSharp_Bool_SWIGUpcast")]
  public static extern global::System.IntPtr Bool_SWIGUpcast(global::System.IntPtr jarg1);
}

}
namespace Fuse.Scripting.V8.Simple {

public class v8 {
  public static SWIGTYPE_p_std__string TypeNames {
    get {
      global::System.IntPtr cPtr = v8PINVOKE.TypeNames_get();
      SWIGTYPE_p_std__string ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__string(cPtr, false);
      return ret;
    } 
  }

}

}
namespace Fuse.Scripting.V8.Simple {

public class SWIGTYPE_p_std__vectorT_V8Simple__String_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_V8Simple__String_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_V8Simple__String_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_V8Simple__String_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace Fuse.Scripting.V8.Simple {

public class SWIGTYPE_p_std__string {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__string(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__string() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__string obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
